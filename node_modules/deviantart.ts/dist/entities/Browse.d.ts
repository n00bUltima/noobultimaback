import { DeviantArtCategoryTree, DeviantArtDailySearch, DeviantArtMoreLikeThisPreview, DeviantArtQueryResults, DeviantArtSearchResults, DeviantArtTagSearch } from "../types/BrowseTypes";
export declare class Browse {
    private readonly accessToken;
    private readonly api;
    constructor(accessToken: string);
    /**
     * This will fetch all of the category paths that you can use in the `category_path` parameter.
     */
    categoryTree: (params: {
        catpath: string;
        mature_content?: boolean;
    }) => Promise<DeviantArtCategoryTree>;
    /**
     * Gets similar deviations to the one specified. Requires the deviation id.
     */
    moreLikeThis: (params: {
        seed: string;
        category?: string;
        offset?: number;
        limit?: number;
        expand?: string;
        mature_content?: boolean;
    }) => Promise<DeviantArtSearchResults>;
    /**
     * Same as [[moreLikeThis]] but returns the preview result.
     */
    moreLikeThisPreview: (params: {
        seed: string;
        expand?: string;
        mature_content?: boolean;
    }) => Promise<DeviantArtMoreLikeThisPreview>;
    /**
     * Fetches daily deviations for today or a certain date if it is specified.
     */
    daily: (params?: {
        date?: string;
        expand?: string;
        mature_content?: boolean;
    }) => Promise<DeviantArtDailySearch>;
    /**
     * Searches deviations using a tag.
     */
    tag: (params: {
        tag: string;
        offset?: number;
        limit?: number;
        expand?: string;
        mature_content?: boolean;
    }) => Promise<DeviantArtQueryResults>;
    /**
     * Searches a tag for similar tags.
     */
    tagSearch: (params: {
        tag_name: string;
        mature_content?: boolean;
    }) => Promise<DeviantArtTagSearch>;
    /**
     * Searches the journals of a user.
     */
    userJournals: (params: {
        username: string;
        featured?: boolean;
        offset?: number;
        limit?: number;
        expand?: string;
        mature_content?: boolean;
    }) => Promise<DeviantArtSearchResults>;
    /**
     * Searches for newest deviations.
     */
    newest: (params?: {
        category_path?: string;
        q?: string;
        offset?: number;
        limit?: number;
        expand?: string;
        mature_content?: boolean;
    }) => Promise<DeviantArtQueryResults>;
    /**
     * Searches for popular deviations.
     */
    popular: (params?: {
        category_path?: string;
        q?: string;
        timerange?: string;
        offset?: number;
        limit?: number;
        expand?: string;
        mature_content?: boolean;
    }) => Promise<DeviantArtQueryResults>;
    /**
     * Searches for hot deviations.
     */
    hot: (params?: {
        category_path?: string;
        offset?: number;
        limit?: number;
        expand?: string;
        mature_content?: boolean;
    }) => Promise<DeviantArtSearchResults>;
    /**
     * Searches for undiscovered deviations.
     */
    undiscovered: (params?: {
        category_path?: string;
        offset?: number;
        limit?: number;
        expand?: string;
        mature_content?: boolean;
    }) => Promise<DeviantArtSearchResults>;
}
