"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var axios_1 = require("axios");
var html_entities_1 = require("html-entities");
var xml2js_1 = require("xml2js");
var apiURL = "https://www.deviantart.com/";
var rssUrl = "https://backend.deviantart.com/rss.xml";
var Api = /** @class */ (function () {
    function Api(accessToken) {
        var _this = this;
        this.accessToken = accessToken;
        /**
         * Gets an endpoint from the DeviantArt api.
         */
        this.get = function (endpoint, params) { return __awaiter(_this, void 0, void 0, function () {
            var url, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = params.params ? params.params : params;
                        params.access_token = this.accessToken;
                        url = apiURL + endpoint;
                        return [4 /*yield*/, axios_1["default"].get(url, { params: params }).then(function (r) { return r.data; })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result];
                }
            });
        }); };
    }
    /**
     * Used internally to get the access token in [[login]]
     */
    Api.getNoLogin = function (endpoint, params) { return __awaiter(void 0, void 0, void 0, function () {
        var url, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    url = apiURL + endpoint;
                    return [4 /*yield*/, axios_1["default"].get(url, { params: params }).then(function (r) { return r.data; })];
                case 1:
                    result = _a.sent();
                    return [2 /*return*/, result];
            }
        });
    }); };
    /**
     * Parses the title, user, and numeric id from a url.
     */
    Api.parseUrl = function (url) {
        var title = url.match(/(?<=art\/)(.*?)(?=\d{5})/g) ? url.match(/(?<=art\/)(.*?)(?=\d{5})/)[0].replace(/-/g, " ") : null;
        var user = url.match(/(?<=com\/)(.*?)(?=\/art)/g) ? url.match(/(?<=com\/)(.*?)(?=\/art)/)[0] : null;
        var id = url.match(/\d{5,}/) ? url.match(/\d{5,}/)[0] : null;
        if (title) {
            title = title.replace(/\d+/, "").trim();
        }
        return { title: title, user: user, id: id };
    };
    /**
     * Fetches xml from the RSS api and converts it to json.
     */
    Api.getRSS = function (params, limit) { return __awaiter(void 0, void 0, void 0, function () {
        var xml, json, jsonArray, i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, axios_1["default"].get(rssUrl, { params: params }).then(function (r) { return r.data; })];
                case 1:
                    xml = _a.sent();
                    return [4 /*yield*/, xml2js_1.parseStringPromise(xml).then(function (r) { return r.rss.channel[0] ? r.rss.channel[0].item : null; })];
                case 2:
                    json = _a.sent();
                    if (!json || !json[0])
                        return [2 /*return*/, Promise.reject("No search results.")];
                    limit = limit ? limit : json.length;
                    jsonArray = [];
                    for (i = 0; i < limit; i++) {
                        jsonArray.push(json[i]);
                    }
                    return [2 /*return*/, jsonArray.filter(Boolean)];
            }
        });
    }); };
    /**
     * Cleans html by stripping tags and entities.
     */
    Api.cleanHTML = function (str) {
        if (!str)
            return "";
        var replaced = str.replace(/<[^>]*>?/gm, "")
            .replace(/(\\')/g, "'");
        var html = new html_entities_1.Html5Entities();
        return html.decode(replaced);
    };
    /**
     * Formats the raw json received to a more friendly version.
     */
    Api.formatJSON = function (json) {
        var parsed = JSON.parse(json);
        var title = parsed["media:title"] ? parsed["media:title"][0]._ : null;
        var url = parsed.link ? parsed.link[0] : null;
        var date = parsed.pubDate ? parsed.pubDate[0] : null;
        var rating = parsed["media:rating"] ? parsed["media:rating"][0] : null;
        var category = parsed["media:category"] ? parsed["media:category"][0].$.label : null;
        var categoryPath = parsed["media:category"] ? parsed["media:category"][0]._ : null;
        var keywords = parsed["media:keywords"];
        var author = parsed["media:credit"] ? parsed["media:credit"][0]._ : null;
        var copyright = parsed["media:copyright"] ? parsed["media:copyright"][0]._ : null;
        var description = parsed["media:description"][0] ? Api.cleanHTML(parsed["media:description"][0]._) : null;
        var thumbnails = [];
        if (parsed["media:thumbnail"]) {
            for (var i = 0; i < parsed["media:thumbnail"].length; i++) {
                thumbnails.push(parsed["media:thumbnail"][i].$);
            }
        }
        var content = [];
        if (parsed["media:content"]) {
            for (var i = 0; i < parsed["media:content"].length; i++) {
                content.push(parsed["media:content"][i].$);
            }
        }
        return {
            title: title, url: url, date: date, rating: rating, category: category, categoryPath: categoryPath, keywords: keywords, author: author, copyright: copyright, description: description, thumbnails: thumbnails, content: content
        };
    };
    return Api;
}());
exports["default"] = Api;
