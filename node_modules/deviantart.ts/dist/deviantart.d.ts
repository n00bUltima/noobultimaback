import api from "./api/api";
import { Browse, Collections, Comments, Curated, Data, Deviation, Gallery, RSS, Stash, User, Util } from "./entities/index";
import { DeviantArtDeviation, DeviantArtDeviationExtended, DeviationRSS, DeviationRSSExtended } from "./types/index";
/**
 * This is the main class for interacting with the DeviantArt API.
 */
export default class DeviantArt {
    static accessToken: string;
    rss: RSS;
    deviation: Deviation;
    user: User;
    gallery: Gallery;
    util: Util;
    browse: Browse;
    curated: Curated;
    data: Data;
    collections: Collections;
    stash: Stash;
    comments: Comments;
    api: api;
    private constructor();
    /**
     * Logs into the DeviantArt API with your client id and token, and retrieves your access token.
     * @returns An instance of the DeviantArt Class.
     */
    static login: (clientId: string, clientSecret: string) => Promise<DeviantArt>;
    /**
     * Finds a deviation from it's URL by iterating through all of the user's
     * submitted illustrations. While slow if the user has a lot of deviations, with
     * this function you can easily get a deviation's id.
     */
    findByIteration: (deviationUrl: string) => Promise<DeviantArtDeviation>;
    /**
     * Extends an array of deviations by adding the description, keywords, and copyright
     * info obtained from the RSS feed.
     */
    extendDeviations: (deviations: DeviantArtDeviation[]) => Promise<DeviantArtDeviationExtended[]>;
    /**
     * Extends an array of deviations from the RSS feed by appending the [[DeviantArtUserProfile]]
     * object from the api call. Overwrites the author property.
     */
    extendRSSDeviations: (deviationsRSS: DeviationRSS[]) => Promise<DeviationRSSExtended[]>;
}
export * from "./types/index";
export * from "./entities/index";
